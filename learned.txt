Atcoder Problems:https://kenkoooo.com/atcoder/#/table/


やったこと(やる予定のこと)：
過去問演習：332, 333
精選など：ABS, https://qiita.com/drken/items/fd4e5e3630d0f5859067


学んだこと：
全体：
pythonの場合，1秒は10^7オーダまで．つまり，N<=10^3ならO(N^2)までOK, N<=10^4ならO(N)まで．

ABS：
PracticeA, printがa bの場合は，printをend=" "にする．空白を忘れないように．
ABC081B, 出力などに利用する文字はiなどを使わない．ループの変数と被る．
ABC083B, 変数にsumなどの標準関数名を使わない．sum(list)が変数として処理される．
ABC088B, 明らかに正解でもsampleぐらいはチェックすること．
ABC088B, listのスライス第三引数は2で一つ飛ばし．
ABC085C, 3変数の全探索O(N^3)をする場合，条件が二つあれば，片方の条件を使って三つ目の変数はbindされる．よってO(N^2)でよい．
ABC085C, 全探索のTLEの障害は，上記bindや，方程式を解くことによる条件の絞り込みでオーダを減らす．
ABC049C, 後ろからの貪欲法などは文字列の場合re.subで後ろから削除する方法で実装できる．しかし，re.subが遅いのでキューの考え方でlastを動かした方が良い．
ABC086C, ランダムウォーク系の問題の一部は，偶数/奇数だけ確認すればよいこともある(パリティの考え方)

ABS_Simi
ABC088C, 仮定を置いてみることが大事．制約も条件もない変数があれば，その変数に関する探索はしなくてよいのではと疑う．
ABC096C, 定式化を整理することがかなり大事かも．仮定も大事．
ABC112C, もし一部だけWAでコーナーケースが疑われたら，探索範囲を少しだけ広げてみてもよい．

332回：
c, 合計の日数とかから考えても良い
c, 条件を文字にしてみるとわかりやすい
d, 入れ替え問題は転倒数に帰着

333回：
b, 一部がWAの時は，コーナーケースを考える
c, 直感的な仮定を置いてみる
d, 累積和を求めて比較する問題は，累積和の数列を二分探索
d, クエリが複数与えられ，出力も複数出すものは，答えを残しておいてまとめて出力する．クエリごとに出力はWAとなる．

便利tips:
累積和：from itertools import accumulate, A=list, list(accumulate(A))
直積，順列，組み合わせ：from itertools import product, permutations,combinations product(A, 2)など
緩和二分探索？(bisearch.py)：from bisect import bisect_left,bisect bisect(L,12)など
最大公約数：from fractions import gcd gcd(1,4)

その他URL：
様々な関数や書き方：https://qiita.com/y-tsutsu/items/aa7e8e809d6ac167d6a1
便利ライブラリ：https://qiita.com/Kentaro_okumura/items/5b95b767a2e691cd5482